source('~/School/College/Info 445/Project/product_scraper/clean.R', echo=TRUE)
View(raw_prods)
x <- "fa\xE7ile"
Encoding(x)
xx <- iconv(x, "latin1", "UTF-8")
xx
y <- "These green Superfeet&#174; insoles align and control"
Encoding(y)
unique(raw_prods$category)
unique(raw_prods$sub_category)
unique(raw_prods$brand)
source('~/School/College/Info 445/Project/product_scraper/clean.R', echo=TRUE)
View(raw_prods)
raw_prods
length(unique(raw_prods$brand))
source('~/School/College/Info 445/Project/product_scraper/clean.R', echo=TRUE)
View(raw_prods)
raw_prods %>% filter(product_name = "Green Premium Insoles - High Volume")
raw_prods %>% filter(product_name == "Green Premium Insoles - High Volume")
raw_prods %>% filter(product_name == "Green Premium Insoles - High Volume") %>% select(description)
source('~/School/College/Info 445/Project/product_scraper/clean.R', echo=TRUE)
is.na(raw_prods)
View(raw_prods)
filter(raw_prods, is.na(brand))
view(filter(raw_prods, is.na(brand)))
View(filter(raw_prods, is.na(brand)))
View(filter(raw_prods, is.na(product_name)))
View(filter(raw_prods, is.na(category)))
View(filter(raw_prods, is.na(sub_category)))
View(filter(raw_prods, is.na(price)))
View(filter(raw_prods, is.na(description)))
brand_list <- unique(raw_prods$brand)
brand_list
# Remove null brands
prods <- raw_prods %>%
filter(is.na(brand)) %>%
mutate(brand = "None")
View(filter(prods, is.na(brand)))
library(htmltools)
htmlEscape("The lightweight, waterproof Sea to Summit Ultra-Sil&#174; Compression Dry Sack compresses your clothing and gear to 1/3 the volume while keeping it dry.
")
htmlEscape("In pages of <i>The Not-For-Parents Travel Book</i> are the epic events, amazing animals, hideous histories, funky foods and crazy facts that make the world's 200 countries so fascinating for kids.
")
library(xml2)
xml2::xml_text(xml2::read_html("In pages of &lt;i&gt;The Not-For-Parents Travel Book&lt;/i&gt; are the epic events, amazing animals, hideous histories, funky foods and crazy facts that make the world's 200 countries so fascinating for kids.\n"))
x <- read_xml("<p>This is some text. This is <b>bold!</b></p>")
xml_text(x)
xml_text(xml_children(x))
utils::URLdecode(z <- "ab%20cd")
utils::URLdecode(z <- "Book&lt;/i&gt; are the")
source('~/School/College/Info 445/Project/product_scraper/clean.R', echo=TRUE)
library(jsonlite)
library(xml2)
library(tibble)
library(readr)
library(dplyr)
# Read in data
raw_prods <-
fromJSON("prods.json") %>%
as_tibble()
# Remove null brands
prods <- raw_prods %>%
filter(is.na(brand)) %>%
mutate(brand = "None")
source('~/School/College/Info 445/Project/product_scraper/clean.R', echo=TRUE)
source('~/School/College/Info 445/Project/product_scraper/clean.R', echo=TRUE)
prods %>% select(brand) %>% mutate(brand_length = length(brand))
tmpchar <- "abcdefg"
length(tmpchar)
library(stringi)
brand_length <- prods %>%
select(brand) %>%
mutate(brand_length - stri_length(brand))
source('~/.active-rstudio-document', echo=TRUE)
raw_prods <-
fromJSON("product_data.json") %>%
as_tibble()
# Remove null brands
raw_prods %>%
filter(is.na(brand)) %>%
mutate(brand = "None")
# Remove null brands
prods <- raw_prods %>%
mutate(brand = ifelse(is.null(brand), "None", brand))
# Write clean data
write_csv(prods, "products_clean.csv")
brand_length <- prods %>%
select(brand) %>%
mutate(brand_length = stri_length(brand))
View(brand_length)
View(prods)
raw_prods <-
fromJSON("product_data.json") %>%
as_tibble()
View(raw_prods)
# Remove null brands
prods <- raw_prods %>%
mutate(brand = ifelse(is.na(brand), "None", brand))
# Write clean data
write_csv(prods, "products_clean.csv")
brand_length <- prods %>%
select(brand) %>%
mutate(brand_length = stri_length(brand)) %>%
group_by(brand) %>%
summarise(max(brand_length))
source('~/School/College/Info 445/Project/product_scraper/analysis.R', echo=TRUE)
View(brand_length)
View(prods)
library(dplyr)
library(tidyr)
char_lengths <- prods %>%
gather()
View(char_lengths)
char_lengths <- prods %>%
gather() %>%
mutate(char_length = stri_length(value)) %>%
group_by(key) %>%
summarise(length = max(char_length))
View(char_lengths)
View(brand_length)
brand_length <- prods %>%
select(brand) %>%
mutate(brand_length = stri_length(brand)) %>%
group_by(brand) %>%
summarise(max(brand_length))
View(brand_length)
View(char_lengths)
View(prods)
# Import libraries
library(jsonlite)
library(xml2)
library(tibble)
library(readr)
library(dplyr)
# Read in data
raw_prods <-
fromJSON("product_data.json") %>%
as_tibble()
# Remove null brands
prods <- raw_prods %>%
mutate(brand = ifelse(is.na(brand), "None", brand))
View(prods)
char_lengths <- prods %>%
gather() %>%
mutate(char_length = stri_length(value)) %>%
group_by(key) %>%
summarise(length = max(char_length))
source('~/School/College/Info 445/Project/product_scraper/analysis.R')
View(char_lengths)
double_products <- prods %>%
group_by(product_name, brand) %>%
summarise(count = n()) %>%
filter(count > 1)
View(double_products)
double_products <- prods %>%
group_by(product_name, brand) %>%
summarise(count = n(), category, sub_category) %>%
filter(count > 1)
double_products <- prods %>%
group_by(product_name, brand) %>%
summarise(count = n()) %>%
filter(count > 1)
# Import libraries
library(jsonlite)
library(xml2)
library(tibble)
library(readr)
library(dplyr)
# Read in data
raw_prods <-
fromJSON("product_data.json") %>%
as_tibble()
# Remove null brands
prods <- raw_prods %>%
mutate(brand = ifelse(is.na(brand), "None", brand))
View(prods)
length(unique(prods$brand))
length(unique(prods$category))
length(unique(prods$sub_category))
length(unique(prods$product_name))
length(prods$product_name)
prods %>% select(category, sub_category) %>% group_by(category) %>% summarise(num_subs = count(sub_category))
prods %>% select(category, sub_category) %>% group_by(category) %>% summarise(num_subs = length(sub_category))
prods %>% select(category, sub_category) %>% group_by(category) %>% summarise(num_subs = length(unique(sub_category)))
library(readxl)
category_groups <- prods %>%
select(category, sub_category) %>%
group_by(category) %>%
summarise(num_subs = length(unique(sub_category)))
View(category_groups)
category_groups <- prods %>%
select(category, sub_category) %>%
group_by(category) %>%
summarise(num_subcategories = length(unique(sub_category)))
View(category_groups)
